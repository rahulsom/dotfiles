[alias]

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Merge GitHub pull request on top of the `master` branch
	mpr = "!f() { \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git rebase master pr/$1 && \
			git checkout master && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

[color]
	# Colour terminal command output when possible.
	ui = auto
[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions
	whitespace = "red reverse"

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]
	# Use the OS X graphical three-way merge tool for graphical diffs.
	tool = opendiff
	# Use the slower but better patience diff algorithm
	algorithm = patience
	# Detect copies as well as renames
	renames = copies

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]
	# Use the OS X graphical three-way merge tool for graphical merges.
	tool = opendiff
	log = true
[mergetool]
	# Don't prompt before opening the merge tool.
	prompt = false
	# Don't keep backups of the merge tool inputs.
	keepBackup = false
	# Don't keep the merge tool temporary input/output files.
	keepTemporaries = false
[mergetool "opendiff"]
	# Use a script to setup opendiff correctly for Git merges.
	path = git-mergetool-opendiff
[help]
	# Open Git help pages in the browser as HTML.
	format = web
	autocorrect = 1
[alias]
	## 'New' Commands
	# Unstage the changes in a given file.
	unstage = reset HEAD --
	# View the current changes in the staging area.
	staged = diff --cached
	# Print the name of the current branch.
	current-branch = symbolic-ref --short HEAD
	# Print the name of the current upstream tracking branch.
	upstream = !git config --get branch.$(git current-branch).remote \
	           || echo origin
	# Cherry-pick a commit with your signature.
	sign = cherry-pick --signoff
	# List all current SVN externals for this repository.
	svn-externals = !git svn show-externals | grep -x \\"[^#].*\\"
	# Create a git:// server of the current repository.
	# WARNING: this gives all users read/write access
	# without authentication (so only use on trusted networks).
	serve = !git daemon --reuseaddr --export-all --base-path=. \
	                    --verbose ./.git
	# Merge a branch and commit a merge commit (even if one
	# isn't needed)
	noff = merge --no-ff
	# Merge a branch with a merge commit and resolve any conflicts
	# always using that branch's version rather than the current branch.
	theirs = !git noff -Xtheirs
	# Fetch all branches and rebase the current branch against
	# upstream/master.
	rebase-against-master = !git fetch --all \
	                      && git rebase $(git upstream)/master
	# Push the current branch upstream to origin using the same branch
	# name for the remote branch.
	upstream-current-branch = !git push --set-upstream origin \
	                         $(git current-branch)
	# Create a pull request on GitHub using the `gh` command.
	pull-request = !git upstream-current-branch && gh pull-request
	# Upstream the current branch to origin and create a pull request
	# on GitHub.
	upstream-and-pull-request = !git upstream-current-branch \
	                          && git pull-request
	# Get the current diff but show differences between characters
	# instead of just the differences between lines.
	word-diff = diff --word-diff
	# Push the current branch and set it as the default upstream branch.
	push-and-set-upstream = push --set-upstream
	# Create a new branch by checking out another branch.
	checkout-as-new-branch = checkout -b
	# Rebase against origin/master and prompt for what operations
	# should be performed.
	interactively-rebase-against-origin-master = \
	  !git rebase --interactive origin/master
	# Show the commit log with a prettier, clearer history.
	pretty-one-line-log = log --graph --oneline --decorate
	# Commit any changes to files, squash them into the last commit
	# and update its date.
	fix-up-previous-commit = !git commit --all --amend \
	                         --reuse-message=HEAD --date=\"$(date)\" #"
	# Checkout the staging branch and update it.
	pull-staging = !git checkout staging && git pull
	# Checkout the master branch and update it.
	pull-master = !git checkout master && git pull
	# Update the staging, master and current branches.
	pull-master-staging-and-current-branch = \
	  !BRANCH=$(git current-branch) && git fetch --all \
	  && git pull-staging && git pull-master && \
	  git checkout $BRANCH && git pull
	# Commit a work-in-progress commit (to use with
	# fix-up-previous-commit)
	work-in-progress = commit -a -m 'WIP'
	# Merge a branch with a merge commit and use the more time-consuming
	# patience diff algorithm
	patience = !git noff -Xpatience
	# Hard reset branch to the upstream version.
	hard-reset = !git reset --hard $(git upstream)/$(git current-branch)
	# Assume the specified file is unchanged to stop changes
	# being seen by Git
	assume = update-index --assume-unchanged
	# No longer assume a specified file remains unchanged
	unassume = update-index --no-assume-unchanged
	# List all files that are assumed to be unchanged
	assumed = !git ls-files -v | grep '^[hsmrck?]' | cut -c 3-
	# List what was accomplished yesterdayish
	standup = !"git log --no-merges --reverse --branches --since=$(if [[ "Mon" == "$(date +%a)" ]]; then echo "'last friday'"; else echo "yesterday"; fi) --author=$(git config --get user.email) --format=format:'%C(cyan) %ad %C(yellow)%h %Creset %s %Cgreen%d' --date=local"

	## Shortened 'New' Commands
	fahr = !git fetch --all && git hard-reset
	rem = !git rebase-against-master
	wip = !git work-in-progress
	pr = !git upstream-and-pull-request
	up = !git upstream-current-branch
	pm = !git pull-master-staging-and-current-branch
	fa = !git fetch --all
	w = !git word-diff
	u = !git push-and-set-upstream
	b = !git checkout-as-new-branch
	i = !git interactively-rebase-against-origin-master
	# `true` needed as the return status is wrong otherwise.
	l = !git pretty-one-line-log || true
	f = !git fix-up-previous-commit
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = matching


	## Shortened Existing Commands
	p = pull
	s = status --short --branch
[instaweb]
	# Use the Ruby WEBRick library when creating a `git instaweb`
	# HTTP server.
	httpd = webrick
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
